{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "startTimestamp",
						"type": "uint32"
					},
					{
						"internalType": "address",
						"name": "_blazeTitanXPool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_titanX",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_blaze",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "IntervalAlreadyBurned",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInput",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LiquidityAlreadyAdded",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MathOverflowedMulDiv",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotEnoughTitanXForLiquidity",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotStartedYet",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlyMinting",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OnlySlippageAdmin",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ReentrancyGuardReentrantCall",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "T",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "titanXAmount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "infernoBurnt",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					}
				],
				"name": "BuyAndBurn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "POSITION_MANAGER",
				"outputs": [
					{
						"internalType": "contract INonfungiblePositionManager",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "_deadline",
						"type": "uint32"
					},
					{
						"internalType": "uint256",
						"name": "_amountBlazeMin",
						"type": "uint256"
					}
				],
				"name": "addLiquidityToInfernoBlazePool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "burnFees",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "burnInferno",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "currWeekDay",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "weekDay",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "t",
						"type": "uint32"
					}
				],
				"name": "dayCountByT",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "distributeTitanXForBurning",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "titanXAmount",
						"type": "uint256"
					}
				],
				"name": "getBlazeQuoteForTitanX",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "quote",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "weekDay",
						"type": "uint8"
					}
				],
				"name": "getDailyTitanXAllocation",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "dailyBPSAllocation",
						"type": "uint32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "t",
						"type": "uint32"
					}
				],
				"name": "getDayEnd",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "baseAmount",
						"type": "uint256"
					}
				],
				"name": "getInfernoQuoteForBlaze",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "quote",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "infernoToken",
				"outputs": [
					{
						"internalType": "contract Inferno",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "interval",
						"type": "uint32"
					}
				],
				"name": "intervals",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "amountAllocated",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "amountBurned",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastBurnedIntervalStartTimestamp",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastIntervalNumber",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "liquidityAdded",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "_newSlippage",
						"type": "uint8"
					}
				],
				"name": "setSlippageForBlazeToInferno",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startTimeStamp",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amountBlazeMin",
						"type": "uint256"
					},
					{
						"internalType": "uint32",
						"name": "_deadline",
						"type": "uint32"
					}
				],
				"name": "swapTitanXForInfernoAndBurn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalInfernoBurnt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalTitanXDistributed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "t",
						"type": "uint32"
					}
				],
				"name": "weekDayByT",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "0xkmmm",
			"errors": {
				"MathOverflowedMulDiv()": [
					{
						"details": "Muldiv operation overflow."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				],
				"ReentrancyGuardReentrantCall()": [
					{
						"details": "Unauthorized reentrant call."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"acceptOwnership()": {
					"details": "The new owner accepts the ownership transfer."
				},
				"addLiquidityToInfernoBlazePool(uint32,uint256)": {
					"params": {
						"_amountBlazeMin": "Minimum amount of TitanX tokens expected",
						"_deadline": "The deadline for the liquidity addition"
					}
				},
				"burnFees()": {
					"returns": {
						"amount0": "The amount of token0 collected",
						"amount1": "The amount of token1 collected"
					}
				},
				"dayCountByT(uint32)": {
					"params": {
						"t": "The timestamp from which to get the timestamp"
					}
				},
				"distributeTitanXForBurning(uint256)": {
					"params": {
						"_amount": "The amount of TitanX tokens"
					}
				},
				"getBlazeQuoteForTitanX(uint256)": {
					"params": {
						"titanXAmount": "The amount of TitanX tokens"
					},
					"returns": {
						"quote": "The amount of Blaze tokens received"
					}
				},
				"getDailyTitanXAllocation(uint8)": {
					"returns": {
						"dailyBPSAllocation": "The daily allocation in basis points"
					}
				},
				"getDayEnd(uint32)": {
					"params": {
						"t": "The time from where to get the day end"
					}
				},
				"getInfernoQuoteForBlaze(uint256)": {
					"params": {
						"baseAmount": "The amount of Blaze tokens"
					},
					"returns": {
						"quote": "The amount of Inferno tokens received"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pendingOwner()": {
					"details": "Returns the address of the pending owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"swapTitanXForInfernoAndBurn(uint256,uint32)": {
					"params": {
						"_amountBlazeMin": "Minimum amount of Blaze tokens expected",
						"_deadline": "The deadline for which the passes should pass"
					}
				},
				"transferOwnership(address)": {
					"details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
				},
				"weekDayByT(uint32)": {
					"params": {
						"t": "The timestamp from which to get the weekDay"
					}
				}
			},
			"title": "InfernoBuyAndBurn",
			"version": 1
		},
		"userdoc": {
			"errors": {
				"IntervalAlreadyBurned()": [
					{
						"notice": "Error when interval has already been burned"
					}
				],
				"InvalidInput()": [
					{
						"notice": "Error when some user input is considered invalid"
					}
				],
				"LiquidityAlreadyAdded()": [
					{
						"notice": "Error when liquidity has already been added"
					}
				],
				"NotEnoughTitanXForLiquidity()": [
					{
						"notice": "Error when we try to create liquidity pool with less than the intial amount"
					}
				],
				"NotStartedYet()": [
					{
						"notice": "Error when the contract has not started yet"
					}
				],
				"OnlyMinting()": [
					{
						"notice": "Error when minter is not msg.msg.sender"
					}
				],
				"OnlySlippageAdmin()": [
					{
						"notice": "Error when caller is not the slippage admin"
					}
				]
			},
			"events": {
				"BuyAndBurn(uint256,uint256,address)": {
					"notice": "Event emitted when tokens are bought and burnt"
				}
			},
			"kind": "user",
			"methods": {
				"POSITION_MANAGER()": {
					"notice": "Uniswap V3 position manager"
				},
				"addLiquidityToInfernoBlazePool(uint32,uint256)": {
					"notice": "Creates a Uniswap V3 pool and adds liquidity"
				},
				"burnFees()": {
					"notice": "Burns the fees collected from the Uniswap V3 position"
				},
				"burnInferno()": {
					"notice": "Burns Inferno tokens held by the contract"
				},
				"constructor": {
					"notice": "Constructor initializes the contractConstructor is payable to save gas"
				},
				"currWeekDay()": {
					"notice": "Gets the current week day (0=Sunday, 1=Monday etc etc) wtih a cut-off hour at 2pm UTC"
				},
				"dayCountByT(uint32)": {
					"notice": "Get the day count for a timestamp"
				},
				"distributeTitanXForBurning(uint256)": {
					"notice": "Distributes TitanX tokens for burning"
				},
				"getBlazeQuoteForTitanX(uint256)": {
					"notice": "Gets a quote for Blaze tokens in exchange for TitanX tokens"
				},
				"getDailyTitanXAllocation(uint8)": {
					"notice": "Gets the daily TitanX allocation"
				},
				"getDayEnd(uint32)": {
					"notice": "Gets the end of the day with a cut-off hour of 2 pm UTC"
				},
				"getInfernoQuoteForBlaze(uint256)": {
					"notice": "Gets a quote for Inferno tokens in exchange for Blaze tokens"
				},
				"infernoToken()": {
					"notice": "Inferno token contract"
				},
				"intervals(uint32)": {
					"notice": "Mapping from interval number to Interval struct"
				},
				"lastBurnedIntervalStartTimestamp()": {
					"notice": "Timestamp of the last burn call"
				},
				"lastIntervalNumber()": {
					"notice": "Last interval number"
				},
				"liquidityAdded()": {
					"notice": "Indicates if liquidity has been added to the pool"
				},
				"startTimeStamp()": {
					"notice": "The startTimestamp"
				},
				"swapTitanXForInfernoAndBurn(uint256,uint32)": {
					"notice": "Swaps TitanX for Inferno and burns the Inferno tokens"
				},
				"totalInfernoBurnt()": {
					"notice": "Total amount of Inferno tokens burnt"
				},
				"totalTitanXDistributed()": {
					"notice": "Total TitanX tokens distributed"
				},
				"weekDayByT(uint32)": {
					"notice": "Gets the current week day (0=Sunday, 1=Monday etc etc) wtih a cut-off hour at 2pm UTC"
				}
			},
			"notice": "This contract handles the buying and burning of Inferno tokens using Uniswap V2 and V3 pools.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Morpheus/src/InfernoBuyAndBurn.sol": "InfernoBuyAndBurn"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://3e7820bcf567e6892d937c3cb10db263a4042e446799bca602535868d822384e",
				"dweb:/ipfs/QmPG2oeDjKncqsEeyYGjAN7CwAJmMgHterXGGnpzhha4z7"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
			"keccak256": "0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038",
			"license": "MIT",
			"urls": [
				"bzz-raw://d919a0061e43f9878f6171b7f853cb92093805cd1160858c1884195a639b40a0",
				"dweb:/ipfs/QmRZsS3EYuLp75nBym1QQ4y6aQXGew75wSbv1uwqkvouUK"
			]
		},
		"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
			"keccak256": "0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5",
			"license": "MIT",
			"urls": [
				"bzz-raw://af63ab940a34687c45f0ad84960b048fc5f49330c92ccb422db7822a444733b9",
				"dweb:/ipfs/QmUShaQEu8HS1GjDnsMJQ8jkZEBrecn6NuDZ3pfjY1gVck"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4",
			"license": "MIT",
			"urls": [
				"bzz-raw://796ab6e88af7bf0e78def0f059310c903af6a312b565344e0ff524a0f26e81c6",
				"dweb:/ipfs/QmcsVgLgzWdor3UnAztUkXKNGcysm1MPneWksF72AvnwBx"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
			"keccak256": "0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5",
				"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
			"keccak256": "0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652",
				"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
			"keccak256": "0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5",
				"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
			"keccak256": "0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7",
				"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
			"keccak256": "0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03",
				"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
			"keccak256": "0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047",
				"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
			"keccak256": "0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735",
				"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
			"keccak256": "0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f",
				"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
			"keccak256": "0x5d3e5de9eadfa1f8a892eb2e95bbebd3e4b8c8ada5b76f104d383fea518fa688",
			"license": "MIT",
			"urls": [
				"bzz-raw://cde108962511e6a4d3cfb7b6fb6a36bdcfa300761c17dad2d7dd87d4f8117b48",
				"dweb:/ipfs/Qmf7YxUVK68JedWybWfXvzLCegsD95DtGc3mbpEWkWSMm8"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f",
				"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229",
				"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
			"keccak256": "0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073",
			"license": "MIT",
			"urls": [
				"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26",
				"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
				"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236",
			"license": "MIT",
			"urls": [
				"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02",
				"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd"
			]
		},
		"Morpheus/lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"Morpheus/lib/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
			"keccak256": "0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b",
			"urls": [
				"bzz-raw://85d5ad2dd23ee127f40907a12865a1e8cb5828814f6f2480285e1827dd72dedf",
				"dweb:/ipfs/QmayKQWJgWmr46DqWseADyUanmqxh662hPNdAkdHRjiQQH"
			]
		},
		"Morpheus/lib/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
			"keccak256": "0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2",
			"urls": [
				"bzz-raw://1df63ca373dafae3bd0ee7fe70f890a1dc7c45ed869c01de68413e0e97ff9deb",
				"dweb:/ipfs/QmefJgEYGUL8KX7kQKYTrDweF8GB7yjy3nw5Bmqzryg7PG"
			]
		},
		"Morpheus/lib/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
			"keccak256": "0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d",
			"urls": [
				"bzz-raw://9bf2f4454ad63d4cff03a0630e787d9e8a9deed80aec89682cd8ad6379d9ef8c",
				"dweb:/ipfs/Qme51hQNR2wpax7ooUadhtqLtXm8ffeVVYyubLkTT4wMCG"
			]
		},
		"Morpheus/lib/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
			"keccak256": "0x4e64844c56061cd90e0a80de73534a9166704c43eed579eb83f90bc2780ce968",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://cba4fab5cebdddf644b901994a7f0f52b98885d4c56012f4dc51d52c2bf9de0e",
				"dweb:/ipfs/QmVyyrRmqXrAiapewWunRVgiPVFJHpH2hKiE1py1svMSNV"
			]
		},
		"Morpheus/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
			"keccak256": "0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5",
				"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ"
			]
		},
		"Morpheus/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
			"keccak256": "0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7",
				"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c"
			]
		},
		"Morpheus/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol": {
			"keccak256": "0xf80abf13fb1fafc127ba4e792f240dd8ea7c8c893978cdfd8439c27fae9a037b",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b04fc72a656bbf3631e9c2e67b9870a2d9d235185e833fe050e9606e6816a9aa",
				"dweb:/ipfs/QmUcz4bkEkJ9pwzFu1C3n97hBQ3st9U6qTAqCdyFwddKco"
			]
		},
		"Morpheus/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
			"keccak256": "0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03",
				"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39"
			]
		},
		"Morpheus/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
			"keccak256": "0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047",
				"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3"
			]
		},
		"Morpheus/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
			"keccak256": "0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735",
				"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u"
			]
		},
		"Morpheus/lib/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
			"keccak256": "0x44fa2ce1182f6c2f6bead3d1737804bf7e112252ae86e0f2e92f9b8249603f43",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://54154e8665b98d65f5dc91b256551852cb47882180b501b260657122d207c0ea",
				"dweb:/ipfs/QmcfemK1A2PXYrWB5SBFGERpMCderbFRb8BtTzQDj1sUBp"
			]
		},
		"Morpheus/lib/v3-core/contracts/libraries/FullMath.sol": {
			"keccak256": "0x7825565a4bb2a34a1dc96bbfead755785dfb0df8ef81bd934c43023689685645",
			"license": "MIT",
			"urls": [
				"bzz-raw://8f44f4614d31e3d4864c7eb13620555253b84f6a69180f8745b7c6e246a9d125",
				"dweb:/ipfs/QmfNQUcXj3KL8h9u5PqbtEC6yRtwDbKNb48uMPjdwxsKnd"
			]
		},
		"Morpheus/lib/v3-core/contracts/libraries/TickMath.sol": {
			"keccak256": "0x5c57de03a91cc2ec8939865dbbcb0197bb6c353b711075eefd8e0fca5e102129",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://1e994c24fd891ef8a3f5dbf5eba42b34feaf05e0376a29f91322faa18054449c",
				"dweb:/ipfs/QmNdUJGUQxd1dPkMbnA5f5UNqakxRkQE5r7bTZJAuHeapS"
			]
		},
		"Morpheus/lib/v3-periphery/contracts/interfaces/IERC721Permit.sol": {
			"keccak256": "0x9e3c2a4ee65ddf95b2dfcb0815784eea3a295707e6f8b83e4c4f0f8fe2e3a1d4",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://bfd939085b3618101b955f87c7fabf38338ba1aad480295acb8102ebc5d72471",
				"dweb:/ipfs/QmauQD8bGDHTztmTDfaKXjzM7Wacrq2XU7VcTbwn1WrDBL"
			]
		},
		"Morpheus/lib/v3-periphery/contracts/interfaces/INonfungiblePositionManager.sol": {
			"keccak256": "0x3357b065654abb7f4a9ebd184a260bc39efde2afa4e99dca2e72ffc28e9c2984",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://f7682dab014724be8e0a5a401b047788ff9c70b77fa5bd567ea6adc333cb3b56",
				"dweb:/ipfs/QmatH1Gc6z3AkP4dHjAEBKfCBbgBfD4vCceF4TuZU2bCyW"
			]
		},
		"Morpheus/lib/v3-periphery/contracts/interfaces/IPeripheryImmutableState.sol": {
			"keccak256": "0x7affcfeb5127c0925a71d6a65345e117c33537523aeca7bc98085ead8452519d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://e16b291294210e71cb0f20cd0afe62ae2dc6878d627f5ccc19c4dc9cd80aec3f",
				"dweb:/ipfs/QmQGitSyBr26nour81BZmpmDMyJpvZRqHQZvnCD1Acb127"
			]
		},
		"Morpheus/lib/v3-periphery/contracts/interfaces/IPeripheryPayments.sol": {
			"keccak256": "0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://f9a90f58f5fd5fb42f7811f4094113b532f307b14a73764c91f977590747f407",
				"dweb:/ipfs/QmSeNH2mfiDMKf3Q6V2sqtNxx1s72JNuA1VVxRM9HoMqYp"
			]
		},
		"Morpheus/lib/v3-periphery/contracts/interfaces/IPoolInitializer.sol": {
			"keccak256": "0x9d7695e8d94c22cc5fcced602017aabb988de89981ea7bee29ea629d5328a862",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://61b50933026ee1017db2a6273af8cedc3238c95dca58880db0918dbdbb2f064f",
				"dweb:/ipfs/QmUebR26pqG25d18aBELKz8aFFKkmHa8PxntzXTA7o9Ldu"
			]
		},
		"Morpheus/lib/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
			"keccak256": "0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a8a2c3e55965b61bcd91993d8e1d5d34b8b8a63e0fdfce87a85f6af92526fd53",
				"dweb:/ipfs/QmQj2CSCSwqDSU4KMNWxGsN2336Cy64WgpV1X1EHXNZWxM"
			]
		},
		"Morpheus/lib/v3-periphery/contracts/libraries/PoolAddress.sol": {
			"keccak256": "0xa72de315bd655a0fd5043ff97c7fd3868a1b5b1986afd75c6f5f8fd0f904985f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a8838e68aba9caf2b2cb13bd4cb661b1f9c167cca4dfcd50ac72ae96691392df",
				"dweb:/ipfs/QmfLq3cmsSQTuLLxiF4bgceaf2jx8CoiVXQd7BZXGgJG1E"
			]
		},
		"Morpheus/lib/v3-periphery/contracts/libraries/TransferHelper.sol": {
			"keccak256": "0x32821db2a308f45fe9fe64a3c9c7413626ea5aa8eb884a31256b3c19296597d2",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://6983a3e5a1bd61ad733c5ccfe2f32480569d4cc0ce4d1280aa51eb8f5272a5b7",
				"dweb:/ipfs/QmdidqggXGVE5XCsKQWSRmtMcLjgbz2dpzoL7grDZWPtuw"
			]
		},
		"Morpheus/src/Inferno.sol": {
			"keccak256": "0x843610f40140ec5eb01858b40030423cc4fe5ffd4bf24d09824fe0257426b59e",
			"license": "MIT",
			"urls": [
				"bzz-raw://385138cbb62de10b4d28062666fe9fb1d6e051fc64c0d7569fd0fed09c91def1",
				"dweb:/ipfs/QmcC51CBF343WFVucjsR8dUMRzpq1cG9xzTyTh4RfXwPEh"
			]
		},
		"Morpheus/src/InfernoBuyAndBurn.sol": {
			"keccak256": "0x6611d970e089702860a7f14410171708e89d73f6eafae56de46c76b8d6029c37",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://623d2102ae915d6fca53acb34f16436155f6e1748a1790e5235362ef90fbbcb5",
				"dweb:/ipfs/QmcoSoGX66zY7s8ZZQzKVxd17QWsx47f2XgQo5UnbH9pna"
			]
		},
		"Morpheus/src/InfernoMinting.sol": {
			"keccak256": "0x9a42f7c4a61e78bebf6374217a0e44d85f95e15cfcbf5121df65190cd84215e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://ff36a97495df9ad13a38b628afed1d52f5803f744b95f5a7dca78142afabbece",
				"dweb:/ipfs/QmRTBUd7AND8SbAu9FL3Y9iGsRqDdYpzUoNb1vdzewtcbR"
			]
		},
		"Morpheus/src/const/BuyAndBurnConst.sol": {
			"keccak256": "0xda7094708398d01241ee3c57aa96d3b3d2618715e5408d67973fcfc516cee804",
			"license": "MIT",
			"urls": [
				"bzz-raw://3a1a709305063935079134bbe1c04f398cccf2e08ed9a8c91fe8d4dc05673358",
				"dweb:/ipfs/QmWXHVPoQLcSp9rKskF5HKTAdFrPX13iVHKgcBCYzjtrRr"
			]
		},
		"Morpheus/src/library/OracleLibrary.sol": {
			"keccak256": "0x15f7219a6ab3cf402fd70c2dea8d9c7afd8bbf3c53faef159beeb45fc32401cb",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://7f932744dc9a2f606f15c71131923936ba6ffb9076ca088857c8ad0900edbad8",
				"dweb:/ipfs/QmQXy1VLMJusf1RryfKhzac9XBhpE4yoohmWUaTt1zYanK"
			]
		}
	},
	"version": 1
}